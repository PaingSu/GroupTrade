"""add account_login

Revision ID: a1a39eaf1fec
Revises: 
Create Date: 2025-05-05 23:56:57.940168

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a1a39eaf1fec'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('trades', sa.Column('account_login', sa.String(length=50), nullable=True))
    op.alter_column('trades', 'trade_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('trades', 'tv_request',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('trades', 'tv_response',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('trades', 'execution_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('trades', 'mt5_response',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('idx_active_trades', table_name='trades', postgresql_where="((status)::text = ANY ((ARRAY['new'::character varying, 'pending'::character varying, 'executing'::character varying])::text[]))")
    op.drop_index('idx_closed_at', table_name='trades')
    op.drop_index('idx_created_at', table_name='trades')
    op.drop_index('idx_executed_at', table_name='trades')
    op.drop_index('idx_execution_data_gin', table_name='trades', postgresql_using='gin')
    op.drop_index('idx_execution_time', table_name='trades')
    op.drop_index('idx_instrument_side', table_name='trades')
    op.drop_index('idx_is_closed_created_at', table_name='trades')
    op.drop_index('idx_mt5_ticket', table_name='trades')
    op.drop_index('idx_open_positions', table_name='trades', postgresql_where='(is_closed = false)')
    op.drop_index('idx_order_id', table_name='trades')
    op.drop_index('idx_position_id', table_name='trades')
    op.drop_index('idx_status', table_name='trades')
    op.drop_index('idx_status_created_at', table_name='trades')
    op.drop_index('idx_status_instrument', table_name='trades')
    op.drop_index('idx_trade_id', table_name='trades')
    op.drop_index('idx_tv_request_gin', table_name='trades', postgresql_using='gin')
    op.drop_constraint('trades_trade_id_key', 'trades', type_='unique')
    op.create_index(op.f('ix_trades_order_id'), 'trades', ['order_id'], unique=False)
    op.create_index(op.f('ix_trades_position_id'), 'trades', ['position_id'], unique=False)
    op.create_index(op.f('ix_trades_trade_id'), 'trades', ['trade_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trades_trade_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_position_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_order_id'), table_name='trades')
    op.create_unique_constraint('trades_trade_id_key', 'trades', ['trade_id'])
    op.create_index('idx_tv_request_gin', 'trades', ['tv_request'], unique=False, postgresql_using='gin')
    op.create_index('idx_trade_id', 'trades', ['trade_id'], unique=True)
    op.create_index('idx_status_instrument', 'trades', ['status', 'instrument'], unique=False)
    op.create_index('idx_status_created_at', 'trades', ['status', 'created_at'], unique=False)
    op.create_index('idx_status', 'trades', ['status'], unique=False)
    op.create_index('idx_position_id', 'trades', ['position_id'], unique=False)
    op.create_index('idx_order_id', 'trades', ['order_id'], unique=False)
    op.create_index('idx_open_positions', 'trades', ['mt5_ticket'], unique=False, postgresql_where='(is_closed = false)')
    op.create_index('idx_mt5_ticket', 'trades', ['mt5_ticket'], unique=False)
    op.create_index('idx_is_closed_created_at', 'trades', ['is_closed', 'created_at'], unique=False)
    op.create_index('idx_instrument_side', 'trades', ['instrument', 'side'], unique=False)
    op.create_index('idx_execution_time', 'trades', ['execution_time_ms'], unique=False)
    op.create_index('idx_execution_data_gin', 'trades', ['execution_data'], unique=False, postgresql_using='gin')
    op.create_index('idx_executed_at', 'trades', ['executed_at'], unique=False)
    op.create_index('idx_created_at', 'trades', ['created_at'], unique=False)
    op.create_index('idx_closed_at', 'trades', ['closed_at'], unique=False)
    op.create_index('idx_active_trades', 'trades', ['created_at'], unique=False, postgresql_where="((status)::text = ANY ((ARRAY['new'::character varying, 'pending'::character varying, 'executing'::character varying])::text[]))")
    op.alter_column('trades', 'mt5_response',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('trades', 'execution_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('trades', 'tv_response',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('trades', 'tv_request',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('trades', 'trade_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('trades', 'account_login')
    # ### end Alembic commands ###
